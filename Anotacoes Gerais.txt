========================================================================== AULA 06 - C# E .NET ==========================================================================

C# - linguagem;
.Net - plataforma que roda outras linguagens;

.Net:
- CLR (Common Language Runtime) - Máquina virtual, similar a JVM do JAVA. A CLR possui Garbage Collection (objetos não utilizados são automaticamente deslocados da memória);
- é uma documentação que possui suas implementações:
  .Net Framework (2002) - roda somente em sistemas Windows, desktop ou web (roda sobre o IIS);
  Mono (2004) - execução multiplataforma (ex.: Unity);
  Xamarin (2011) - baseado no Mono, para a criação de aplicativos para dispositivos móveis;
  .Net Core (2016) - roda em multiplataformas, muita performance e praticidade;

================================================================== AULA 07 - COMPILAÇÃO E INTERPRETAÇÃO ==================================================================

Linguagem compilada (C, C++)
Linguagem interpretada (PHP, JavaScript)
Linguagem pré-compilada + máquina virtual (Java, C#)

Compilação - necessita de um compilador específico para a plataforma desejada. Talvez haja necessidade de adaptações.
Interpretação - necessita de um programa que irá interpretar o código e convertendo para a plataforma desejada. A vantagem é que o código será escrito uma única vez, porém, a desvantagem é que é um processo mais lento do que a compilação.
Na pré-compilação, é escrito o código-fonte e será feita uma pré-compilação gerando um código intermediário, o bytecode, que será executado em cima da máquina virtual específica de cada sistema. A vantagem é que o bytecode já passou pelo processo de compilação.

==================================================================== AULA 08 - ESTRUTURA APLICAÇÃO C# ====================================================================

Aplicação, na orientação a objetos, é composta por classes.
As classes podem ser agrupadas em namespaces (agrupamento LÓGICO de classes relacionadas):
- Entities (Entidades de negócio, ex.: produto, cliente, pedido)
- Services (serviços do sistema)
- Repositories (classes que acessam os dados)

Assembly (DLL ou EXE) - Agrupamento físico de classes relacionadas (build). Ex.: um sistema muito grande, que possui diversos módulos, podem ser agrupados:
- Módulo Financeiro (entities, services, repositories)
- Módulo Gráficos (Gráficos 3D, Gráficos 2D, Utilitários)
como se fossem subprogramas que formam um programa.

Aplicação ou solução - agrupamento de assemblies relacionados:
Aplicação = Solution
Assembly = Project
Ex.: Sistema de Comércio Eletrônico, pode possuir vários assemblies

============================================================== AULA 09 - INSTALAÇÃO VISUAL STUDIO COMMUNITY ==============================================================

- Documentação:
https://docs.microsoft.com/pt-br/visualstudio/install/install-visual-studio?view=vs-2019

- Download do 'bootstrapper' do Visual Studio:
https://visualstudio.microsoft.com/downloads

Cargas de Trabalho:
- ASP.NET e desenvolvimento Web;
- Desenvolvimento para Azure;
- Desenvolvimento para desktop com .NET;
- Desenvolvimento com a plataforma universal do Windows;
- Processamento e armazenamento de dados;
- Desenvolvimento multiplataforma com .NET Core;

==================================================================== AULA 10 - MEU PRIMEIRO PROGRAMA =====================================================================

-Indentação automática: Ctrl + K + D
-Rodar o projeto: Ctrl + F5
-Aumentar/Diminuir Fonte: Ctrl + Mouse Scroll

============================================================== AULA 11 - ESTRUTURA BÁSICA DE UM PROGRAMA C# ==============================================================

-Estrutura do projeto:
O projeto C# é uma solução. Ele possui um arquivo com extensão .sln (responsável por abrir o projeto).
Arquivo com extensão .csproj é um arquivo de configuração do projeto e somente será alterado, caso deva acrescentar alguma dependência, por exemplo.
As pastas 'bin' e 'obj' são arquivos gerados da compilação do projeto.

-Estrtura do código:
'using...' - referência a algum namespace;
'namespace' - agrupamento de classes relacionadas. É opcional;
'class' - todo código feito, deve estar dentro de uma classe que é a unidade básica da Programação Orientada a Objetos.
'static void Main' - declaração padrão que identifica o entrypoint da aplicação, ou seja, o ponto de entrada.

=================================================================== AULA 12 - DICAS DO VISUAL STUDIO =====================================================================

-Alterar Idioma:
Ferramentas -> Opções -> Ambiente -> Configurações Internacionais -> Idioma
Tools -> Options -> Enviromment -> International Settings -> Language

-Abrir ou fechar o projeto:
Abrir arquivo .sln

-Indentação automática:
Ctrl + K + D

- Quebra de linha nas chaves:
Tools -> Options -> Text Editor -> C# -> Code Estiling -> Formatting -> New Lines

============================================================ AULA 15 - TIPOS BÁSICOS DE DADOS EM C# (PARTE 1) =============================================================

-Link oficial dos tipos de dados (Microsoft):
https://docs.microsfoft.com/en-us/dotnet/csharp/language-reference/keywords/built-in-types-table
 _________________________________________________________________________________________________________________
| C# Types | .Net Framework Type | Signed | Bytes |                        Possible Values                        |
|  sbyte   |    System.SByte     |   Yes  |   1   |                          -128 to 127                          | --|
|  short   |    System.Int16     |   Yes  |   2   |                        -32768 to 32767                        |   |
|   int    |    System.Int32     |   Yes  |   4   |                        -2³¹ to 2³¹ - 1                        |   |
|   long   |    System.Int64     |   Yes  |   8   |                        -2⁶³ to 2⁶³ - 1                        |   |--- Todos para números inteiros. A diferença é
|   byte   |    System.Byte      |   No   |   1   |                            0 to 255                           |   |    se tem sinal ou não e o número de bytes.
|  ushort  |    System.Uint16    |   No   |   2   |                           0 to 65535                          |   |
|   uint   |    System.Uint32    |   No   |   4   |                          0 to 2³² - 1                         |   |
|   ulong  |    System.Uint64    |   No   |   8   |                          0 to 2⁶⁴ - 1                         | --|
|   float  |    System.Single    |   Yes  |   4   |      ±1.5 x 10-⁴⁵ to± 3.4x10³⁸ with 7 significant figures     |
|  double  |    System.Double    |   Yes  |   8   | ±5.0 x 10-³²⁴ to± 1.7x10³°⁸ with 15 or 16 significant figures |
| decimal  |   System.Decimal    |   Yes  |   12  |  ±1.0 x 10-²⁸ to± 7.9x10²⁸ with 28 or 29 significant figures  |
|   char   |    System.Char      |   N/A  |   2   |                     Any Unicode Character                     |
|   bool   |   System.Boolean    |   N/A  |   12  |                           true or false                       |
 -----------------------------------------------------------------------------------------------------------------

Na declaração de variáveis, usar:
sbyte x = 100;
ou
SByte x = 100;
É a mesma declaração, porém no segundo caso, precisa da referência ('using System') pois a segunda declaração pertence ao namespace System.

-Overflow:
É quando um cálculo extrapola o limite da variável.

-Tipo LONG:
Ao trabalhar com números do tipo long, usa-se a letra L ao final do número para indicar que está trabalhando com número long.

============================================================ AULA 16 - TIPOS BÁSICOS DE DADOS EM C# (PARTE 2) =============================================================

-Utilizar o tipo CHAR:
usa-se aspas SIMPLES;

- Utilizar o código Unicode em uma variável do tipo Char:
Ex: letra A -> Código: 0041
'\u0041'

-Utilizar o tipo FLOAT:
usa-se a letra 'f' ao final do número. Caso não seja utilizado a letra 'f', o sistema irá entender que se trata de um número do tipo DOUBLE;

-Utilizar o tipo STRING:
usa-se aspas DUPLAS;
Strings não são considerados tipos básicos em C#;
 _________________________________________________________________________________________________________________
| C# Types | .Net Framework Type |                                    Descrição                                   |
|  string  |    System.String    | Uma cadeia de caracteres Unicode IMUTÁVEL(segurança, simplicidade, thread safe)|
|  object  |    System.Object    |          Um objeto genérico (toda classe em C# é subclasse de object)          |
|          |                     | GetType, Equals, GetHashCode, ToString                                         |
 -----------------------------------------------------------------------------------------------------------------

-Valores Mínimos e Máximos de um tipo:
Há uma propriedade em cada tipo que informa os valores mínimo e máximo - MinValue e MaxValue:
Ex.: int.MinValue, sbyteMaxValue

============================================================== AULA 17 - RESTRIÇÕES PARA NOMES DE VARIÁVEIS ==============================================================

RESTRIÇÕES:
*Não pode começar com dígito: use uma letra ou _
*Não usar acentos ou til (a linguagem até aceita, mas não é recomendável)
*Não pode ter espaço em branco
*SUGESTÃO: use nomes que tenham significado

ERRADO: 				CORRETO:
int 5minutos;				int _5minutos;
int salário;				int salario;
int salario do funcionario;		int salarioDoFuncionario;

CONVENÇÕES:
*Camel Case: lastName(parâmetros de métodos, variáveis dentro de métodos). Primeira letra minúscula e as demais iniciais maiúsculas;
*Pascal Case: LastName(namespaces, classe, properties e métodos). Todas as iniciais são maiúsculas;
*Padrão -lastname(atributos "internos" da classe)

===================================================================== AULA 18 - SAÍDA DE DADOS EM C# =====================================================================

*Comandos:
Console.WriteLine(valor);
Console.Write(valor);

*Controlando as casas decimais:
Console.WriteLine(saldo.toString("F2"));

*Imprimir um número decimal com ponto ao invés da vírgula:
 ________________________________________________________________________
| using System.Globalization;                                            |
|                                                                        |
| double saldo = 10.35784;                                               |
|                                                                        |
| Console.WriteLine(saldo.toString("F4"), CultureInfo.InvariantCulture); |
 ------------------------------------------------------------------------

*Placeholders
Console.WriteLine("{0} tem {1} anos e tem saldo igual a {2:F2}", nome, idade, saldo);
Console.WriteLine("{0} tem {1} anos e tem saldo igual a {2} reais.", nome, idade, saldo.toString("F2"), CultureInfo.InvariantCulture);

*Interpolação
Console.WriteLine($"{nome} tem {idade} anos e tem saldo igual a {saldo:F2} reais.");
Console.WriteLine($"{nome} tem {idade} anos e tem saldo igual a {saldo.toString("F2", CultureInfo.InvariantCulture)} reais.");

*Concatenação
Console.WriteLine(nome + " tem " + idade + " anos e tem saldo igual a " + saldo.toString("F2") + " reais.");
Console.WriteLine(nome + " tem " + idade + " anos e tem saldo igual a " + saldo.toString("F2", CultureInfo.InvariantCulture) + " reais.");

==================================================================== AULA 19 - OPERADORES ARITMÉTICOS ====================================================================

*Operadores:
+ - * / %
 ________________________________________
| NOTAS:                                 |
| 1) * / % tem precedência maior que + - |
| 2) Exemplos                            |
| 	3 + 4 * 2 --> Resultado 11       |
|	(3 + 4) * 2 --> Resultado 14     |
| 3) Pode-se usar parênteses à vontade   |
| 4)Exemplo com mod:                     |
|	17 % 3 --> Resultado: 2          |
 ----------------------------------------

*Divisão de números inteiros com resultado fracionário:
	int n4 = 10 / 8; 
=> resultado vai ser 1. Pois como há a divisão de dois números inteiros, a máquina entende que se pretende obter apenas a parte inteira do resultado. O correto seria usar o casting:
	double n4 = (double) 10 / 8;	ou	double n4 = 10.0 / 8;

*Declarando diversas variáveis de uma vez:
	double a = 1.0, b = -3.0, c = -4.0;

=================================================================== AULA 20 - OPERADORES DE ATRIBUIÇÃO ===================================================================

 ______________________________________
| Operador | Exemplo |   Significado   |
|--------------------------------------|
|     =    | a = 10; |   a RECEBE 10   |
|    +=    | a += 2; | a RECEBE a + 2; |
|    -=    | a -= 2; | a RECEBE a - 2; |
|    *=    | a *= 2; | a RECEBE a * 2; |
|    /=    | a /= 2; | a RECEBE a / 2; |
|    %=    | a %= 3; | a RECEBE a % 3; |
 --------------------------------------

*Atribuição em strings com o operador +=
	string x = "ABC";
	Console.WriteLine(x);
	x += "DEF";
	Console.WriteLine(x);
Obs: a atribuição também serve caso o segundo valor esteja armazenado em uma variável.

 _______________________________________
| Operador |    Exemplo   | Significado |
|    ++    | a++; ou ++a; | a = a + 1;  |
|    --    | a--; ou --a; | a = a - 1;  |
 ---------------------------------------

*a++
int x1 = 10;
int x2 = x1++; // Atribui o valor de x1 para a variável x2, e depois incrementa o valor da variável x1.

*++a
int x3 = 20;
int x4 = ++x3; // Incrementa o valor da variável x3, e depois atribui o valor de x3 para a variável x4.

================================================================ AULA 21 - CONVERSÃO IMPLÍCITA E CASTING =================================================================

*Conversão implícita entre tipos:
https://docs.microsoft.com/pt-br/dotnet/csharp/language-reference/keywords/implicit-numericconversions-table

	 _________________
	| float x = 4.5f; |
	| double y = x;   | => Operação possível, pois float tem 4bytes e double tem 8bytes. Sendo assim, a variável float, cabe dentro da variável double.
	 -----------------
	 _________________
	| double a = 5.1; |
	| float b = a;    | => Operação incorreta, pois uma variável double não cabe dentro de uma variável float, podendo haver perda de dados.
	 -----------------     Caso o programador tenha certeza da operação, pode ser feita a conversão utilizando CASTING.

	 ___________________________
	| int a = 5;                |
	| int b = 2;                | => A variável resultado terá valor 2, pois como é uma divisão de dois números inteiros, o compilador entende que o resultado
	| double resultado = a / b; |    da divisão deve ser um número inteiro, considerando apenas a parte inteira da divisão. Para garantir que o resultado seja double,
	 ---------------------------     e que as casas decimais não sejam descartadas, deve-se fazer uma conversão explícita (CASTING).

*Casting:
Conversão explícita entre tipos COMPATÍVEIS

	 _____________________
	| double a = 5.1;     |
	| float b = (float)a; | => Conversão explícita
	 ---------------------
	 _____________________
	| double a = 5.1;     |
	| float c = (int)a;   | => Conversão explícita. Nesse tipo de conversão, os valores depois da vírgula serão truncados.
	 ---------------------

============================================================== AULA 22 - ENTRADA DE DADOS EM C# (PARTE 1) ================================================================

* Console.ReadLine()
- Lê da entrada padrão até a quebra de linha;
- Retorna os dados lidos na forma de string;

* Split
Recorta uma string em vários pedaços conforme foi informado ao compilador.
	 _____________________________
	| "batata" "tomate" "abacaxi" | => O comando SPLIT é utilizado para "separar" nesse caso, as três palavras em variáveis diferentes, sendo que foram digitadas
	|   p1       p2        p3     |    na mesma linha no console.
	 -----------------------------
											 _______________________________________________
	string s = Console.ReadLine();							| string[] vet = Console.ReadLine().Split(' '); |
	string[] vet = s.Split(' ');							| string p1 = vet[0];                           |
	string p1 = vet[0];				=> SIMPLIFICANDO =>		| string p2 = vet[1];                           |
	string p2 = vet[1];								| string p3 = vet[2];                           |
	string p3 = vet[2];								 -----------------------------------------------

============================================================== AULA 23 - ENTRADA DE DADOS EM C# (PARTE 2) ================================================================

*Convertendo Console.ReadLine() para outros tipos de variáveis
Como o comando Console.ReadLine é usado somente para strings, deve-se converter para o tipo de dado desejado
	int n1 = int.Parse(Console.ReadLine());
	char ch = char.Parse(Console.ReadLine());
	double n2 = double.Parse(Console.ReadLine());  => ao converter para números decimais, deve-se atentar quanto à vírgula na saída do dado devido ao idioma do
							teclado, sendo necessário usar o comando CultureInfo.InvariantCulture

================================================================== AULA 25 - OPERADORES COMPARATIVOS =====================================================================

 ___________________________
| Operador |   Significado  |
|---------------------------|
|    >     |      maior     |
|    <     |      menor     |
|    >=    | maior ou igual |
|    <=    | menor ou igual |
|    ==    |      igual     |
|    !=    |    diferente   |
 ---------------------------

===================================================================== AULA 26 - OPERADORES LÓGICOS =======================================================================

 ________________________								 __________________ 	 ____________________       _____________
| Operador | Significado |	NOTAS:							| C1 | C2 | C1 E C2|	| C1 | C2 | C1 OU C2 |     | C1 | NÃO C1 |
|----------|-------------|	1) Precedência: ! > && > ||				|----|----|--------|	|----|----|----------|     |----|--------|
|    &&    |      E      |	2) Pode-se usar parênteses à vontade			|  F |  F |    F   |	|  F |  F |     F    |     |  F |    V   |
|    ||    |      OU     |	3) Exemplos:						|  F |  V |    F   |	|  F |  V |     V    |     |  V |    F   |
|    !     |     NÃO     |		2 > 3 || 4 != 5  --> Resultado: true		|  V |  F |    F   |	|  V |  F |     V    |      -------------
 ------------------------		!(2 > 3) && 4 != 5  --> Resultado: true		|  V |  V |    V   |	|  V |  V |     V    |
											 ------------------	 --------------------

=============================================================== AULA 27 - ESTRUTURA CONDICIONAL (IF-ELSE) ================================================================

*Estrutura Condicional Simples:			*Estrutura Condicional Composta				*Estrutura Condicional com Encadeamentos
	if (condicao) {					if (condicao) {					if (condicao 1){
	   comando 1					   comando 1					   comando 1
	   comando 2					   comando 2					   comando 2
	}						}						}
							else{						else if (condicao 2){
							   comando 3					   comando 3
							   comando 4					   comando 4
							}						}
													else if (condicao 3){
	 _____________________________________________							   comando 5
	| NOTA: se o bloco de comandos possuir apenas |							   comando 6
	|     um comando, as chaves são opcionais     |								}
	 ---------------------------------------------							else {
													   comando 7
													   comando 8
													}

=================================================================== AULA 28 - ESCOPO E INICIALIZAÇÃO =====================================================================

*Escopo de uma variável:
- É a região do programa onde a variável é válida, ou seja, onde ela pode ser referenciada
- Uma variável não pode ser usada se não for iniciada
- Quando se declara uma variável dentro de uma estrutura, a variável só irá existir durante a execução da estrutura. Quando a execução terminar, a variável será 
desalocada.
- Não se pode utilizar uma variável de um escopo menor, dentro de um escopo maior.

====================================================================== AULA 30 - FUNÇÕES (SINTAXE) =======================================================================

* Representam um processamento que possui significado:
	- Math.Srqt(double)
	- Console.WriteLine(string)

* Principais vantagens:
	- Modularização - dividir o programa em partes menores
	- Delegação - delegar o processamento para outro local
	- Reaproveitamento - chamar uma função ao invés de repetir todo o algoritmo

* Dados de entrada e saída
	- Funções podem receber dados de entrada (parâmetros ou argumentos)
	- Funções podem ou não retornar uma saída

* Em orientação a objetos, funções em classes, recebem o nome de "métodos"

================================================================= AULA 31 - DEBUGGING COM VISUAL STUDIO ==================================================================

*Debugging:
Execução passo-a-passo do algoritmo

*Teclas:
- F9 - Marcar/desmarcar breakpoints (ponto a partir de onde será executado o debug);
- F5 - Iniciar/continuar o debug;
- F10 - executar um passo (pula função);
- F11 - executar um passo (entra na função);
- SHIFT + F11 - sair do método em execução;
- SHIFT + F5 - interrompe o debug;

*Observações:
- Linha destacada em vermelhor indica existência de um breakpoint;
- Linha destacada em amarelo indica a próxima linha a ser executada;
- Aba 'Locals' no Visual Studio no modo debug, vai conter todas as variáveis do escopo local (escopo da função);
- Aba 'Watch' - expressões personalizadas;
- Aba 'Autos' - expressões "interessantes" detectadas pelo Visual Studio;
- Quando for usada a tecla F10 no modo debug, ao chegar em uma função, o debug irá "pular" a função e não irá entrar nela;

============================================================ AULA 32 - ESTRUTURA REPETITIVA ENQUANTO (WHILE) =============================================================
						 ____________________
* Estrutura "enquanto"				| REGRA:             |
	while (condição) {			|		     |
	   comando 1				| V: executa e volta |
	   comando 2				| F: pula fora       |
	}					 --------------------

=============================================================== AULA 34 - ESTRUTURA REPETITIVA PARA (FOR) ================================================================

 _________________	 ____________________	 __________________
| Executa somente |	| V: executa e volta |	| Executa toda vez |
| na primeira vez |	| F: pula fora       |	| depois de voltar |
 -----------------	 --------------------	 ------------------
		    \		  |		 /
		     \		  |		/
		for (início; condição; incremento){
   		   comando 1
   		   comando 2
		}

*Usada quando você conhece antecipadamente a quantidade de repetições;

========================================== AULA 39 - CRIANDO UMA CLASSE COM TRÊS ATRIBUTOS PARA REPRESENTAR MELHOR O TRIÂNGULO ===========================================

---Resolvendo o exercício da área de dois triângulos (aula anterior) usando orientação a objetos.----		Memória:
														 _____________________
*Discussão:													|   		      |
Triângulo é uma entidade com três atributos: a, b, c.								| 3.00   .00   5.00   |
Estamos usando três variáveis distintas para representar cada triângulo:					|   xA   xB     xC    |
														|   	              |
	double xA, xB, xC, yA, yB, yC;										|  7.50   4.50   4.02 |
														|   yA     yB     yC  |
Para melhorar isso, vamos utilizar uma CLASSE para representar um triângulo.                                     ---------------------

==========================CLASSE:

*É um tipo estruturado que pode conter (membros):
	-Atributos (dados / campos);
	-Métodos (funções / operações);

*A classe também pode prover muitos outros recursos, tais como:
	-Construtores;
	-Sobrecarga;
	-Encapsulamento;
	-Herança;
	-Polimorfismo;

*Exemplos:
	-Entidades: Produto, Cliente, Triângulo;
	-Serviços: ProdutoService, ClienteService, EmailService, StorageService
	-Controladores: ProdutoController, ClienteController
	-Utilitátios: Calculadora, Compactador
	-Outros: vies, repositórios, gerenciadores
 ____________________________________________________________________________________________________________________________________________________________________
| namespace Course																		     |
| {																				     |
|    class Triangulo																		     |
|    {																				     |
|       public double A;																	     |
|       public double B;																	     |
|       public double C;																	     |
|    }																				     |
| }																				     |
|																				     |
| double xA, xB, xC, yA, yB, yC;												Triangulo x, y;			     |
|   ____      ____     ____									____ ____ ____			x = new Triangulo;		     |
|  |    |    |    |   |    |				    				x -->  |    |    |    |			y = new Triangulo;		     |
|  |    |    |    |   |    |				    |\   			       |    |    |    |							     |
|   ----      ----     ----			____________|  \				---- ---- ----							     |
|    xA        xB       xC		       |		 \				  A    B    C							     |
|   ____      ____     ____		       |____________	 /				____ ____ ____			Agora, serão duas variáveis (x, y) e |
|  |    |    |    |   |    |			            |  /			y -->  |    |    |    |			elas serão do tipo Triangulo.  	     |
|  |    |    |    |   |    |				    |/				       |    |    |    |			(A classe também é um tipo de dado)  |
|   ----      ----     ----									---- ---- ----			Objeto composto que irá conter os 3  |
|    yA        yB       yC									  A    B    C			atributos A, B e C.		     |
 --------------------------------------------------------------------------------------------------------------------------------------------------------------------

*INSTANCIAÇÃO				double areaX, areaY, P;
(alocação dinâmica de memória):		Triangulo x, y;			-->	new Triangulo();
 _______________________________________________________________________________________
|   				    MEMÓRIA						|
|    _____________________________		 ___________________________________	|
|   |		 STACK		  |		|		HEAP		    |   |         A parte da memória chamada Stack, é onde são armazenadas as
|   |    ____     ____     ____   |		|				    |   |         variáveis estáticas, conforme feita nas declarações.
|   |   |    |   |    |   |    |  |		|				    |   |	  Quando o tipo de uma variável é uma classe, deve ser instanciada
|   |   |    |   |    |   |    |  |		|				    |   |         a classe, e aí é criado na área Heap da memória, área dinâmica, o
|   |    ----     ----     ----   |		|				    |   |	  objeto composto contendo os atributos.
|   |   areaX     areaY      P    |		|				    |   |
|   |				  |		|   0x100358:                       |   |	  Na variável x (dentro da área Stack), vai conter o endereço do
|   |    ________     _________   |		|   _________ _________ _________   |   |	  objeto. Como se a variável x "apontasse" para o objeto.
|   |   |        |   |         |  |		|  |         |         |         |  |   |	  O x é uma referência para o objeto em si.
|   |   |        |   | 0x100358| -|-------------|->|         |         |         |  |   |
|   |    --------     ---------   |		|   --------- --------- ---------   |   |
|   |        x            Y       |		|        A         B         C      |   |	Classe: é a definição do tipo
|   |-----------------------------		 -----------------------------------    |	Objetos: são instâncias da classe
|										        |
 ---------------------------------------------------------------------------------------

======================================== AULA 41 - CRIANDO UM MÉTODO PARA OBTERMOS OS BENEFÍCIOS DE REAPROVEITAMENTO E DELEGAÇÃO =========================================

*Discussão:
Com o uso da CLASSE, agora nós temos uma variável composta do tipo "Triângulo" para representar cada triângulo:
	
	Triangulo x, y;
	x = new Triangulo();
	y = new Triangulo();

Agora, vamos melhorar nossa CLASSE, acrescentando um MÉTODO para calcular a área.
(No problema dos triângulos, há repetição de código no cálculo da área, além de um cálculo de área específico não deveria ficar no programa principal)

*Projeto da Classe (UML) - desenhar uma classe antes mesmo de programar.
 __________________________
|         Triangulo   <----|------------Nome da Classe
|--------------------------|
| - A : double             |
| - B : double        <----|------------Atributos da Classe
| - C : double             |
|--------------------------|
| + CalcularArea(): double |<-----------Métodos da Classe
 --------------------------

*Quais são os benefícios de se calcular a área de um triângulo por um meio de um MÉTODO dentro da CLASSE Triangulo?
	-Reaproveitamento de código: nós eliminamos o código repetido (cálculo das áreas dos triângulos x e y) no programa principal;
	-Delegação de responsabilidades: quem deve ser responsável por saber como calcular a área de um triângulo é o próprio triângulo. A lógica do cálculo da área não 		deve estar em outro lugar.

====================================================================== AULA 43 - OBJECT E ToString =======================================================================

*Toda classe em C# é uma subclasse da classe Object

*Object possui os seguintes métodos:
	-GetType - retorna o tipo do objeto;
	-Equals - compara se o objeto é igual ao outro;
	-GetHashCode - retorna um código hash do objeto;
	-ToString - converte o objeto para string;

================================================================= AULA 46 - MEMBROS ESTÁTICOS (PARTE 1) ==================================================================

Uma classe possui membros, que são atributos e/ou métodos.

* Também chamados membros de classe
- Em oposição a membros e instância.

* São membros que fazem sentido independentemente de objetos. Não precisam de objeto para serem chamados. São chamados a partir do próprio nome da classe.

* Aplicações comuns:
- Classes utilitárias; -- Math.Sqrt(double)
- Declaração de constantes;

* Uma classe que possui somente membros estáticos, pode ser uma classe estática também. Esta classe não poderá ser instanciada.

Exemplo:
 _______________________________________________________________
| Triangulo x, y;						|
| x = new Triangulo();						|	=> Não é uma operação estática. É uma operação de instância.
| y = new Triangulo();						|	Na operação estática sempre vai dar o mesmo resultado independente do objeto.
|								|
|       _____ _____ _____					|
| X -> | 3.0 | 4.0 | 5.0 |		x.Area()  => 6.0000	|
|	----- ----- -----					|
|	  a     b     c						|
|       _____ _____ ______					|
| y -> | 7.5 | 4.5 | 4.02 |		y.Area()  => 7.5638	|
|	----- ----- ------					|
|	  a     b     c						|
|---------------------------------------------------------------

* Não se pode chamar uma função que não é estática da mesma classe, dentro de uma função estática.