========================================================================== AULA 06 - C# E .NET ==========================================================================

C# - linguagem;
.Net - plataforma que roda outras linguagens;

.Net:
- CLR (Common Language Runtime) - Máquina virtual, similar a JVM do JAVA. A CLR possui Garbage Collection (objetos não utilizados são automaticamente deslocados da memória);
- é uma documentação que possui suas implementações:
  .Net Framework (2002) - roda somente em sistemas Windows, desktop ou web (roda sobre o IIS);
  Mono (2004) - execução multiplataforma (ex.: Unity);
  Xamarin (2011) - baseado no Mono, para a criação de aplicativos para dispositivos móveis;
  .Net Core (2016) - roda em multiplataformas, muita performance e praticidade;

================================================================== AULA 07 - COMPILAÇÃO E INTERPRETAÇÃO ==================================================================

Linguagem compilada (C, C++)
Linguagem interpretada (PHP, JavaScript)
Linguagem pré-compilada + máquina virtual (Java, C#)

Compilação - necessita de um compilador específico para a plataforma desejada. Talvez haja necessidade de adaptações.
Interpretação - necessita de um programa que irá interpretar o código e convertendo para a plataforma desejada. A vantagem é que o código será escrito uma única vez, porém, a desvantagem é que é um processo mais lento do que a compilação.
Na pré-compilação, é escrito o código-fonte e será feita uma pré-compilação gerando um código intermediário, o bytecode, que será executado em cima da máquina virtual específica de cada sistema. A vantagem é que o bytecode já passou pelo processo de compilação.

==================================================================== AULA 08 - ESTRUTURA APLICAÇÃO C# ====================================================================

Aplicação, na orientação a objetos, é composta por classes.
As classes podem ser agrupadas em namespaces (agrupamento LÓGICO de classes relacionadas):
- Entities (Entidades de negócio, ex.: produto, cliente, pedido)
- Services (serviços do sistema)
- Repositories (classes que acessam os dados)

Assembly (DLL ou EXE) - Agrupamento físico de classes relacionadas (build). Ex.: um sistema muito grande, que possui diversos módulos, podem ser agrupados:
- Módulo Financeiro (entities, services, repositories)
- Módulo Gráficos (Gráficos 3D, Gráficos 2D, Utilitários)
como se fossem subprogramas que formam um programa.

Aplicação ou solução - agrupamento de assemblies relacionados:
Aplicação = Solution
Assembly = Project
Ex.: Sistema de Comércio Eletrônico, pode possuir vários assemblies

============================================================== AULA 09 - INSTALAÇÃO VISUAL STUDIO COMMUNITY ==============================================================

- Documentação:
https://docs.microsoft.com/pt-br/visualstudio/install/install-visual-studio?view=vs-2019

- Download do 'bootstrapper' do Visual Studio:
https://visualstudio.microsoft.com/downloads

Cargas de Trabalho:
- ASP.NET e desenvolvimento Web;
- Desenvolvimento para Azure;
- Desenvolvimento para desktop com .NET;
- Desenvolvimento com a plataforma universal do Windows;
- Processamento e armazenamento de dados;
- Desenvolvimento multiplataforma com .NET Core;

==================================================================== AULA 10 - MEU PRIMEIRO PROGRAMA =====================================================================

-Indentação automática: Ctrl + K + D
-Rodar o projeto: Ctrl + F5
-Aumentar/Diminuir Fonte: Ctrl + Mouse Scroll

============================================================== AULA 11 - ESTRUTURA BÁSICA DE UM PROGRAMA C# ==============================================================

-Estrutura do projeto:
O projeto C# é uma solução. Ele possui um arquivo com extensão .sln (responsável por abrir o projeto).
Arquivo com extensão .csproj é um arquivo de configuração do projeto e somente será alterado, caso deva acrescentar alguma dependência, por exemplo.
As pastas 'bin' e 'obj' são arquivos gerados da compilação do projeto.

-Estrtura do código:
'using...' - referência a algum namespace;
'namespace' - agrupamento de classes relacionadas. É opcional;
'class' - todo código feito, deve estar dentro de uma classe que é a unidade básica da Programação Orientada a Objetos.
'static void Main' - declaração padrão que identifica o entrypoint da aplicação, ou seja, o ponto de entrada.

=================================================================== AULA 12 - DICAS DO VISUAL STUDIO =====================================================================

-Alterar Idioma:
Ferramentas -> Opções -> Ambiente -> Configurações Internacionais -> Idioma
Tools -> Options -> Enviromment -> International Settings -> Language

-Abrir ou fechar o projeto:
Abrir arquivo .sln

-Indentação automática:
Ctrl + K + D

- Quebra de linha nas chaves:
Tools -> Options -> Text Editor -> C# -> Code Estiling -> Formatting -> New Lines